% Multi-stage version

city : type.
player : type.
card : type.
% city cards are card-forming constants that take a city argument
city_card city : card.

adjacent city city : pred.  % Edge on the map graph
res_ctr city : pred.        % Research center
disease city : pred.        % City has disease cube
at player city : pred.      % Player is at city
turn player : pred.         % Player has a turn
hand player card : pred.    % Player has card in hand
deck card : pred.           % Card is in the deck

% For handling player turns
active_player player : pred. % Player is currently active
after player player : bwd.  % Player goes after other player

% Counting outbreaks
nat : type.
z : nat. s nat : nat.
#builtin NAT nat.
#builtin NAT_ZERO z.
#builtin NAT_SUCC s.

outbreaks nat : pred.

greater_equal nat nat : bwd.
greater_equal N 0.
greater_equal (s N) (s M)
  <- greater_equal N M.


% Player actions
stage play = {
  drive :
    turn P * at P C * $adjacent C C'
  -o
    at P C'.

  fly :
    turn P * at P C * hand P (city_card C')
  -o
    at P C' * deck (city_card C').

  build :
    turn P * $at P C * hand P (city_card C)
  -o
    res_ctr C * deck (city_card C).

  treat :
    turn P * $at P C * disease C
  -o
    ().

  % Spend turns without doing anything
  nothing : turn P -o ().

} % #interactive play.


infection : pred.
disease_add city : pred.

% Select next player + add 2 infection tokens
next_player : 
  qui * stage play * active_player P
  * after P P'
-o
  stage infect *
  active_player P'
  * turn P' * turn P' * turn P' * turn P'
  * infection * infection.

% Spread disease to 2 random cities and identify outbreaks
stage infect {
  infection * deck (city_card C) -o disease_add C.
}.

not_outbroken : pred.

qui * stage infect
  -o stage infect_process * not_outbroken.

outbroken city : pred.
restore_adjacent city city : pred.

stage infect_process {
  process : disease_add C -o disease C * deck (city_card C).

  restore_map : restore_adjacent C D -o adjacent C D.

  check_outbreak1 :
    not_outbroken * disease C * $disease C * $disease C * $disease C
    * outbreaks N
  -o
    outbroken C * outbreaks (s N).


  check_outbreak2 :
    $outbroken D * $adjacent D C 
    * disease C * $disease C * $disease C * $disease C 
    * outbreaks N
  -o
    outbroken C * outbreaks (s N).
}.

qui * stage infect_process * $outbroken C
  -o stage outbreak.

qui * stage infect_process * not_outbroken
  -o stage play.

lost : pred.
not_lost : pred.

stage outbreak {

  lose:
    not_lost *
    outbreaks N * greater_equal N 8 -o lost.

  spread : 
    $outbroken C * adjacent C C' -o disease_add C' * restore_adjacent C C'.
}.

qui * stage outbreak * not_lost -o stage infect_process.

atlanta : city.
los_angeles : city.
bogota : city.
kinshasa : city.
delhi : city.


player_a : player.
player_b : player.
player_c : player.
player_d : player.

after player_a player_b.
after player_b player_c.
after player_c player_d.
after player_d player_a.

context init = {
% world map
  adjacent atlanta los_angeles,
  adjacent los_angeles atlanta,
  adjacent los_angeles bogota,
  adjacent los_angeles delhi,
  adjacent bogota los_angeles,
  adjacent bogota kinshasa,
  adjacent kinshasa delhi,
  adjacent delhi kinshasa,
  adjacent delhi los_angeles,

% game state
  res_ctr atlanta,
  at player_a atlanta,
  at player_b atlanta,
  at player_c atlanta,
  at player_d atlanta,
  active_player player_a,
  turn player_a, turn player_a,
  turn player_a, turn player_a,
  hand player_a (city_card bogota),
  hand player_a (city_card los_angeles),
  disease delhi,

% card deck
% 2 cards for every city, including those in player hands
  deck (city_card bogota),
  deck (city_card los_angeles),
  deck (city_card atlanta),
  deck (city_card atlanta),
  deck (city_card delhi),
  deck (city_card delhi),
  deck (city_card kinshasa),
  deck (city_card kinshasa),

% outbreak counter at 0
  outbreaks 0,
  not_lost
}.

#trace _ play init.
