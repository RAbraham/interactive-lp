%% Minimal implementation of the "snake" arcade game. Snake has an
%% inertial movement direction, can eat apples to grow, can be told
%% to change direction. Body segments are generated as growth;
%% follow head sement/body segments closer to head.

nat : type.
z : nat.
s nat : nat.

#builtin NAT nat.
#builtin NAT_ZERO z.
#builtin NAT_SUCC s.

lt nat nat : bwd.
lt z (s N).
lt (s N) (s M)
  <- lt N M.

tile : type.

snake_head : tile.
snake_body nat : tile.

apple : tile.

pos : type.
cell nat nat : pos.

dir : type.
up : dir.
left : dir.
right : dir.
down : dir.

key dir : bwd.
key up.
key left.
key right.
key down.

adj pos pos : bwd.
adj/horizontal
  : adj (cell X Y) (cell (s X) Y).
adj/vertical
  : adj (cell X Y) (cell X (s Y)).

dir_from pos dir pos : bwd.
dir_from/down
  : dir_from (cell X Y) down (cell X (s Y)).
dir_from/up
  : dir_from P up P'
    <- dir_from P' down P.
dir_from/right
  : dir_from (cell X Y) right (cell (s X) Y).
dir_from/left
  : dir_from P left P'
    <- dir_from P' right P.

%% Predicates %%
at tile pos : pred.         % tile T is at pos P
snake_dir dir : pred.       % the snake is moving in dir D
snake_length nat : pred.    % the snake's current length is N
grid_size nat : pred.       % grid is bounded to w/h X
intend_move tile pos : pred. % tile intends to move to pos
before_move tile : pred.     % tile has no movement intention

context init =
{
  grid_size 5,
  at snake_head (cell 1 1),
  at apple (cell 2 2),
  snake_length 0,
  snake_dir up,
  before_move snake_head   % no movement intention
}.


stage main = {
  begin_move :
    before_move snake_head
    * $at snake_head Pos * $snake_dir Dir
      * dir_from Pos Dir (cell X Y)
      * $grid_size Max * lt X Max * lt Y Max
    -o intend_move snake_head (cell X Y).

  change_dir : snake_dir Dir * key Dir' -o snake_dir Dir'.

  eat_apple :
    at snake_head Pos * intend_move snake_head Next * at apple Next
    * snake_length Len
  -o
    at snake_head Next * before_move snake_head 
      * at (snake_body (s Len)) Pos * before_move (snake_body (s Len))
      * snake_length (s Len).

  move :
    at Tile Pos * intend_move Tile Next
  -o
    at Tile Next * before_move Tile.

  % Body follows head
  begin_move_body_lastseg :
    $snake_length N * before_move (snake_body N)
      * $at snake_head Pos * $intend_move snake_head Next
  -o intend_move (snake_body N) Pos.

  begin_move_body_follow :
    before_move (snake_body N)
      * $at (snake_body (s N)) Pos * $intend_move (snake_body (s N)) Next
  -o intend_move (snake_body N) Pos.
    
    
}.
#interactive main.

#trace _ main init.

%% TODO:
% - Separate into 2 stages, one for generating movement intentions and
%   another for actually executing movement
% - Add a third stage for pressing a key to change dir? Or think about
%   more interesting representations of inertia, and generalize
%   begin_move to pick any adjacent tile.
% - Growth: how does actual snake do this? Does it actually grow from the
%     tail, *after* moving all previous body segments?
% - Add more apple generation
% - Add lose condition - running into wall or self
% - Add win condition? Certain length reached?
% - Code improvements:
%   - Just make the snake head be a body segment at "distance 0" from the
%   head; encode all other segs as their distance from the head? more
%   annoying though for growth.
